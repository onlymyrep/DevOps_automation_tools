---
- name: Precache setup and common configuration
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Install common dependencies
      apt:
        name:
          - python3-venv
          - unzip
          - curl
          - python3-apt
          - distro-info-data
          - htop
          - iotop
        state: present
        update_cache: true
        cache_valid_time: 3600
        autoclean: true

    - name: Upgrade pip safely
      pip:
        name: pip
        state: latest
        extra_args: --root-user-action=ignore
      when: ansible_python is defined

    - name: Create consul group and user
      group:
        name: consul
        state: present

    - name: Create consul user
      user:
        name: consul
        group: consul
        system: true
        shell: /bin/false
        home: /nonexistent

- name: Setup Consul server
  hosts: consul_server
  become: true
  tasks:
    - name: Copy Consul binary
      copy:
        src: "consul_1.21.2_linux_amd64.zip"
        dest: /tmp/consul.zip
        mode: 0644

    - name: Install Consul
      unarchive:
        src: /tmp/consul.zip
        dest: /usr/local/bin
        remote_src: true
        mode: 0755
        creates: /usr/local/bin/consul

    - name: Create config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul

    - name: Configure Consul server
      template:
        src: "/home/vagrant/consul/consul_server.hcl"
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
      register: consul_config
      notify: restart consul

    - name: Create systemd service
      copy:
        dest: /etc/systemd/system/consul.service
        content: |
          [Unit]
          Description=Consul Service Discovery Agent
          Documentation=https://www.consul.io/
          Requires=network-online.target
          After=network-online.target

          [Service]
          User=consul
          Group=consul
          ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
          ExecReload=/bin/kill -HUP $MAINPID
          KillSignal=SIGTERM
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      notify: restart consul

    - name: Start Consul service
      systemd:
        name: consul
        state: started
        enabled: true
        daemon_reload: true

- name: Setup Consul clients
  hosts: api, db
  become: true
  tasks:
    - name: Copy Consul binary
      copy:
        src: "consul_1.21.2_linux_amd64.zip"
        dest: /tmp/consul.zip
        mode: 0644

    - name: Install Consul
      unarchive:
        src: /tmp/consul.zip
        dest: /usr/local/bin
        remote_src: true
        mode: 0755
        creates: /usr/local/bin/consul

    - name: Install Envoy via binary
      block:
        - name: Download Envoy
          get_url:
            url: https://github.com/envoyproxy/envoy/releases/download/v1.25.10/envoy-1.25.10-linux-x86_64
            dest: /usr/local/bin/envoy
            mode: '0755'
            timeout: 60

        - name: Create envoy group
          group:
            name: envoy
            system: yes

        - name: Create envoy user
          user:
            name: envoy
            system: true
            group: envoy
            shell: /bin/false
            home: /nonexistent
      when: ansible_os_family == 'Debian'

    - name: Create config directory
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul

    - name: Configure Consul client for API nodes
      template:
        src: "/home/vagrant/consul/consul_client_api.hcl"
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
      when: "'api' in group_names"
      notify: reload consul

    - name: Configure Consul client for DB nodes
      template:
        src: "/home/vagrant/consul/consul_client_db.hcl"
        dest: /etc/consul.d/consul.hcl
        owner: consul
        group: consul
      when: "'db' in group_names"
      notify: reload consul

    - name: Create systemd service
      copy:
        dest: /etc/systemd/system/consul.service
        content: |
          [Unit]
          Description=Consul Service Discovery Agent
          Documentation=https://www.consul.io/
          Requires=network-online.target
          After=network-online.target

          [Service]
          User=consul
          Group=consul
          ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
          ExecReload=/bin/kill -HUP $MAINPID
          KillSignal=SIGTERM
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      notify: restart consul

    - name: Start Consul service
      systemd:
        name: consul
        state: started
        enabled: true
        daemon_reload: true

    - name: Create Envoy service for hotels
      copy:
        dest: /etc/systemd/system/envoy-hotels.service
        content: |
          [Unit]
          Description=Envoy Proxy for Hotels Service
          After=consul.service

          [Service]
          ExecStart=/usr/local/bin/consul connect envoy -sidecar-for hotels-service -admin-bind 127.0.0.1:19001
          Restart=always
          User=envoy
          Group=envoy

          [Install]
          WantedBy=multi-user.target
      when: "'api' in group_names"
      notify: restart envoy hotels

    - name: Create Envoy service for postgres
      copy:
        dest: /etc/systemd/system/envoy-postgres.service
        content: |
          [Unit]
          Description=Envoy Proxy for PostgreSQL
          After=consul.service

          [Service]
          ExecStart=/usr/local/bin/consul connect envoy -sidecar-for postgres -admin-bind 127.0.0.1:19002
          Restart=always
          User=envoy
          Group=envoy

          [Install]
          WantedBy=multi-user.target
      when: "'db' in group_names"
      notify: restart envoy postgres

- name: Setup database
  hosts: db
  become: true
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present
        update_cache: true

    - name: Install PostgreSQL Python library
      apt:
        name: python3-psycopg2
        state: present

    - name: Get PostgreSQL version
      shell: "pg_config --version | awk '{print $2}' | cut -d'.' -f1"
      register: pg_version
      changed_when: false

    - name: Ensure PostgreSQL config directory exists
      file:
        path: "/etc/postgresql/{{ pg_version.stdout }}/main"
        state: directory
        owner: postgres
        group: postgres
        mode: 0755

    - name: Configure PostgreSQL authentication
      template:
        src: "roles/install_db/templates/pg_hba.conf.j2"
        dest: "/etc/postgresql/{{ pg_version.stdout }}/main/pg_hba.conf"
      notify: Reload PostgreSQL

    - name: Set postgres password
      become: true
      become_user: postgres
      command: >
        psql -c "ALTER USER postgres PASSWORD 'secure_password'"

    - name: Check if database exists
      become: true
      become_user: postgres
      command: psql -tAc "SELECT 1 FROM pg_database WHERE datname='hotels_db'"
      register: db_exists
      changed_when: false
      ignore_errors: true

    - name: Create database
      become: true
      become_user: postgres
      command: >
        createdb hotels_db
        --encoding=UTF8
        --lc-collate=C.UTF-8
        --lc-ctype=C.UTF-8
      when: db_exists.stdout != "1"

    - name: Show database creation result
      debug:
        var: db_exists.stdout

- name: Setup hotels service
  hosts: api
  become: true
  vars:
    postgres_user: "hotel_user"
    postgres_password: "securepassword"

  tasks:
    - name: Create service user
      user:
        name: hotels
        system: true
        shell: /bin/false
        home: /nonexistent

    - name: Install Java
      apt:
        name: openjdk-8-jdk
        state: present

    - name: Create application directory
      file:
        path: /opt/hotels-service
        state: directory
        owner: hotels
        group: hotels

    - name: Copy application JAR
      copy:
        src: "{{ playbook_dir }}/files/hotel-service.jar"
        dest: /opt/hotels-service/hotel-service.jar
        owner: hotels
        group: hotels
        mode: 0644

    - name: Configure environment
      template:
        src: "{{ playbook_dir }}/roles/install_hotels_service/templates/hotels-service.env.j2"
        dest: /etc/default/hotels-service
        owner: hotels
        group: hotels

    - name: Create systemd service
      copy:
        dest: /etc/systemd/system/hotels-service.service
        content: |
          [Unit]
          Description=Hotels Service
          After=network.target
          Requires=envoy-hotels.service

          [Service]
          EnvironmentFile=/etc/default/hotels-service
          ExecStart=/usr/bin/java -jar /opt/hotels-service/hotel-service.jar
          User=hotels
          Group=hotels
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
      notify: restart hotels service

    - name: Create service definition
      copy:
        dest: /etc/consul.d/hotels.json
        content: |
          {
            "service": {
              "name": "hotels-service",
              "port": 8082,
              "connect": {
                "sidecar_service": {
                  "proxy": {
                    "upstreams": [
                      {
                        "destination_name": "postgres",
                        "local_bind_port": 5432
                      }
                    ]
                  }
                }
              }
            }
          }
      notify: reload consul

    - name: Start hotels service
      systemd:
        name: hotels-service
        state: started
        enabled: true
        daemon_reload: true

- name: Start Envoy services
  hosts: api, db
  become: true
  tasks:
    - name: Start and enable Envoy for hotels
      systemd:
        name: envoy-hotels.service
        state: started
        enabled: true
        daemon_reload: true
      when: "'api' in group_names"

    - name: Start and enable Envoy for postgres
      systemd:
        name: envoy-postgres.service
        state: started
        enabled: true
        daemon_reload: true
      when: "'db' in group_names"

- name: Health checks
  hosts: all
  become: true
  tasks:
    - name: Check Consul status
      command: /usr/local/bin/consul members
      register: consul_status
      changed_when: false
      ignore_errors: true

    - name: Show Consul status
      debug:
        msg: "{{ consul_status.stdout_lines }}"

    - name: Check system resources
      shell: |
        echo "CPU: $(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage "%"}')"
        echo "Memory: $(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}')"
        echo "Disk: $(df -h / | awk 'NR==2{print $5}')"
      register: sys_info
      changed_when: false

    - name: Show system info
      debug:
        var: sys_info.stdout_lines

- name: Test CRUD operations
  hosts: api
  become: false
  tasks:
    - name: Create hotel
      uri:
        url: "http://localhost:8082/hotels"
        method: POST
        body_format: json
        body:
          name: "Test Hotel"
          address: "Test Address"
          rating: 4
        status_code: 201
      register: create_result
      ignore_errors: true
      retries: 3
      delay: 10
      until: create_result.status == 201
      changed_when: false

    - name: Show creation result
      debug:
        var: create_result

  handlers:
    - name: reload consul
      systemd:
        name: consul
        state: reloaded

    - name: restart consul
      systemd:
        name: consul
        state: restarted
        daemon_reload: true

    - name: restart envoy hotels
      systemd:
        name: envoy-hotels.service
        state: restarted

    - name: restart envoy postgres
      systemd:
        name: envoy-postgres.service
        state: restarted

    - name: reload postgresql
      systemd:
        name: postgresql
        state: reloaded

    - name: restart hotels service
      systemd:
        name: hotels-service
        state: restarted
        daemon_reload: yes